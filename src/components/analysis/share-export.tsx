"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { 
  Share2, 
  Link, 
  Twitter, 
  Facebook, 
  Mail, 
  Check,
  FileText,
  FileJson,
  Table
} from "lucide-react"
import { cn } from "@/lib/utils"
import { AnalysisResult, ShareMethod, ExportFormat } from "@/types/analysis-display"

// PDF generation
import jsPDF from 'jspdf'

export interface ShareExportProps {
  result: AnalysisResult
  onShare?: (method: ShareMethod) => void
  onExport?: (format: ExportFormat) => void
  className?: string
}

export function ShareExport({ result, onShare, onExport, className }: ShareExportProps) {
  const [dialogOpen, setDialogOpen] = useState(false)
  const [copiedLink, setCopiedLink] = useState(false)
  const [exporting, setExporting] = useState<ExportFormat | null>(null)

  // Generate shareable link
  const generateShareLink = () => {
    const baseUrl = typeof window !== 'undefined' ? window.location.origin : ''
    return `${baseUrl}/results/${encodeURIComponent(result.url)}?score=${result.score}&status=${result.status}`
  }

  // Copy link to clipboard
  const copyLink = async () => {
    try {
      const shareLink = generateShareLink()
      await navigator.clipboard.writeText(shareLink)
      setCopiedLink(true)
      setTimeout(() => setCopiedLink(false), 2000)
      onShare?.('link')
    } catch (err) {
      console.error('Failed to copy link:', err)
    }
  }

  // Social media sharing
  const shareToSocial = (method: ShareMethod) => {
    const shareLink = generateShareLink()
    const text = `Check out this URL safety analysis: ${result.url} scored ${result.score}/100 (${result.status.toUpperCase()})`
    
    let url = ''
    
    switch (method) {
      case 'twitter':
        url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(shareLink)}`
        break
      case 'facebook':
        url = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareLink)}&quote=${encodeURIComponent(text)}`
        break
      case 'email':
        url = `mailto:?subject=${encodeURIComponent('URL Safety Analysis Results')}&body=${encodeURIComponent(`${text}\n\nView full analysis: ${shareLink}`)}`
        break
    }
    
    if (url) {
      window.open(url, '_blank', 'noopener,noreferrer')
      onShare?.(method)
    }
  }

  // Export to PDF
  const exportToPDF = async () => {
    setExporting('pdf')
    try {
      const pdf = new jsPDF()
      
      // Add title
      pdf.setFontSize(20)
      pdf.text('URL Security Analysis Report', 20, 30)
      
      // Add URL
      pdf.setFontSize(12)
      pdf.text(`URL: ${result.url}`, 20, 50)
      pdf.text(`Analysis Date: ${result.timestamp.toLocaleDateString()}`, 20, 60)
      
      // Add score and status
      pdf.setFontSize(16)
      pdf.text(`Safety Score: ${result.score}/100`, 20, 80)
      pdf.text(`Status: ${result.status.toUpperCase()}`, 20, 95)
      
      // Add key findings
      pdf.setFontSize(14)
      pdf.text('Key Findings:', 20, 115)
      
      let yPosition = 130
      result.findings.slice(0, 5).forEach((finding) => {
        pdf.setFontSize(10)
        pdf.text(`â€¢ ${finding.title}: ${finding.description}`, 25, yPosition)
        yPosition += 15
      })
      
      // Add technical summary
      yPosition += 10
      pdf.setFontSize(14)
      pdf.text('Technical Summary:', 20, yPosition)
      yPosition += 15
      
      pdf.setFontSize(10)
      pdf.text(`Domain Age: ${Math.floor(result.technicalData.domainAge.ageInDays / 365)} years`, 25, yPosition)
      yPosition += 10
      pdf.text(`SSL Certificate: ${result.technicalData.ssl.isValid ? 'Valid' : 'Invalid'}`, 25, yPosition)
      yPosition += 10
      pdf.text(`Overall Reputation: ${result.technicalData.reputation.overallRating}`, 25, yPosition)
      
      // Add footer
      pdf.setFontSize(8)
      pdf.text('Generated by ScamChecker.com', 20, 280)
      
      // Save the PDF
      pdf.save(`url-analysis-${result.url.replace(/[^a-zA-Z0-9]/g, '-')}.pdf`)
      
      onExport?.('pdf')
    } catch (error) {
      console.error('PDF export failed:', error)
    } finally {
      setExporting(null)
    }
  }

  // Export to JSON
  const exportToJSON = () => {
    setExporting('json')
    try {
      const jsonData = JSON.stringify(result, null, 2)
      const blob = new Blob([jsonData], { type: 'application/json' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `url-analysis-${result.url.replace(/[^a-zA-Z0-9]/g, '-')}.json`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
      
      onExport?.('json')
    } catch (error) {
      console.error('JSON export failed:', error)
    } finally {
      setExporting(null)
    }
  }

  // Export to CSV
  const exportToCSV = () => {
    setExporting('csv')
    try {
      const csvData = [
        ['Field', 'Value'],
        ['URL', result.url],
        ['Score', result.score.toString()],
        ['Status', result.status],
        ['Confidence', (result.confidence * 100).toFixed(1) + '%'],
        ['Analysis Date', result.timestamp.toISOString()],
        ['Domain Age (Days)', result.technicalData.domainAge.ageInDays.toString()],
        ['SSL Valid', result.technicalData.ssl.isValid.toString()],
        ['SSL Issuer', result.technicalData.ssl.issuer],
        ['Reputation Rating', result.technicalData.reputation.overallRating],
        ['AI Content Score', result.technicalData.ai.contentScore.toString()],
        ['AI Confidence', (result.technicalData.ai.confidence * 100).toFixed(1) + '%'],
      ]
      
      // Add findings
      result.findings.forEach((finding, index) => {
        csvData.push([`Finding ${index + 1} Title`, finding.title])
        csvData.push([`Finding ${index + 1} Description`, finding.description])
        csvData.push([`Finding ${index + 1} Severity`, finding.severity])
      })
      
      const csvContent = csvData.map(row => 
        row.map(cell => `"${cell.replace(/"/g, '""')}"`)
           .join(',')
      ).join('\n')
      
      const blob = new Blob([csvContent], { type: 'text/csv' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `url-analysis-${result.url.replace(/[^a-zA-Z0-9]/g, '-')}.csv`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
      
      onExport?.('csv')
    } catch (error) {
      console.error('CSV export failed:', error)
    } finally {
      setExporting(null)
    }
  }

  return (
    <div className={cn("flex items-center gap-2", className)}>
      {/* Quick Share Button */}
      <Button variant="outline" size="sm" onClick={copyLink}>
        {copiedLink ? (
          <>
            <Check className="h-4 w-4 mr-2" />
            Copied!
          </>
        ) : (
          <>
            <Link className="h-4 w-4 mr-2" />
            Copy Link
          </>
        )}
      </Button>

      {/* Full Share/Export Dialog */}
      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogTrigger asChild>
          <Button variant="outline" size="sm">
            <Share2 className="h-4 w-4 mr-2" />
            Share & Export
          </Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Share & Export Results</DialogTitle>
            <DialogDescription>
              Share this analysis or export the data for later use
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            {/* URL Info */}
            <div className="space-y-2">
              <div className="text-sm font-medium">Analysis Results</div>
              <div className="p-3 bg-muted rounded-lg">
                <div className="text-sm font-mono text-muted-foreground mb-2 break-all">
                  {result.url}
                </div>
                <div className="flex items-center gap-2">
                  <Badge variant={result.status === 'safe' ? 'default' : 
                                 result.status === 'moderate' ? 'secondary' :
                                 result.status === 'caution' ? 'outline' : 'destructive'}>
                    {result.status.toUpperCase()}
                  </Badge>
                  <span className="text-sm text-muted-foreground">
                    Score: {result.score}/100
                  </span>
                </div>
              </div>
            </div>

            <Separator />
            
            {/* Share Options */}
            <div className="space-y-3">
              <div className="text-sm font-medium">Share Results</div>
              <div className="grid grid-cols-2 gap-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={copyLink}
                  className="justify-start"
                >
                  {copiedLink ? (
                    <>
                      <Check className="h-4 w-4 mr-2" />
                      Copied!
                    </>
                  ) : (
                    <>
                      <Link className="h-4 w-4 mr-2" />
                      Copy Link
                    </>
                  )}
                </Button>
                
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => shareToSocial('twitter')}
                  className="justify-start"
                >
                  <Twitter className="h-4 w-4 mr-2" />
                  Twitter
                </Button>
                
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => shareToSocial('facebook')}
                  className="justify-start"
                >
                  <Facebook className="h-4 w-4 mr-2" />
                  Facebook
                </Button>
                
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => shareToSocial('email')}
                  className="justify-start"
                >
                  <Mail className="h-4 w-4 mr-2" />
                  Email
                </Button>
              </div>
            </div>

            <Separator />
            
            {/* Export Options */}
            <div className="space-y-3">
              <div className="text-sm font-medium">Export Data</div>
              <div className="space-y-2">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={exportToPDF}
                  disabled={exporting === 'pdf'}
                  className="w-full justify-start"
                >
                  <FileText className="h-4 w-4 mr-2" />
                  {exporting === 'pdf' ? 'Generating PDF...' : 'Export as PDF Report'}
                </Button>
                
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={exportToJSON}
                  disabled={exporting === 'json'}
                  className="w-full justify-start"
                >
                  <FileJson className="h-4 w-4 mr-2" />
                  {exporting === 'json' ? 'Generating JSON...' : 'Export as JSON Data'}
                </Button>
                
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={exportToCSV}
                  disabled={exporting === 'csv'}
                  className="w-full justify-start"
                >
                  <Table className="h-4 w-4 mr-2" />
                  {exporting === 'csv' ? 'Generating CSV...' : 'Export as CSV Table'}
                </Button>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}